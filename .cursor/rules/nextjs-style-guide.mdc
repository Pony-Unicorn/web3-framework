---
description: Next.js with TypeScript and Tailwind UI best practices
globs: ["src/**/*.tsx", "src/**/*.ts"]
alwaysApply: true
---

You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, and Tailwind and Motion. 

Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

This includes properly structuring server and client components, optimizing layouts, handling loading states, and organizing route segments in compliance with static export (output: 'export') constraints.

### Objective
  - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

### Code Style and Structure

- Write clean, idiomatic TypeScript using concise and expressive syntax.
- Use **functional and declarative** patterns; avoid classes and imperative logic.
- Extract reusable logic into **custom hooks** or utility functions.
- Avoid code duplication by **modularizing** logic and using iteration where appropriate.
- Use **descriptive variable names** with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Structure files in this order: exported component â†’ subcomponents â†’ hooks â†’ helpers â†’ static content â†’ types.
- Avoid code comments unless explaining complex logic or describing function signatures.

### Naming Conventions

- Use **kebab-case** for filenames (e.g. `new-component.tsx`).
- Prefer **named exports** for components instead of default exports.
- Place all components inside the top-level `components/` directory.
- Organize the `components/` directory into the following subfolders:

  - `ui/`: Auto-generated UI components from `shadcn/ui`. **Do not edit manually** â€” these are managed by the generator.
  - `layouts/`: Page layout components such as `MainLayout`, `AuthLayout`.
  - `shared/`: Components reused across multiple pages, such as `Header`, `Footer`.
  - `elements/`: Small, reusable functional components like `Modal`, `Toast`, `Loading`.

### Component

- Use **client components** by default; this project uses `output: 'export'` and does not support server components.
- Use `'use client'` directive explicitly at the top of each interactive component.
- Wrap async or delayed client components in **`<Suspense>`** with a clear fallback UI.
- Use **dynamic `import()`** to lazy-load non-critical or below-the-fold components.

### Hooks

- Use React hooks according to the official [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html).
- Create **custom hooks** to encapsulate reusable or complex logic.
- Keep hooks **focused and single-purpose** â€” avoid combining unrelated logic in the same hook.
- Always include accurate **dependency arrays** in `useEffect` and other reactive hooks.
- Add **cleanup functions** inside `useEffect` when side effects require teardown (e.g., event listeners, timeouts).
- Never call hooks conditionally or inside loops â€” avoid **nested hooks**.

### Forms

- Use **controlled components** for all form inputs.
- Manage forms using `react-hook-form` as the standard library.
- Perform validation with `Zod` using the `zodResolver` integration.
- Handle submission states (`loading`, `success`, `error`) explicitly using component state.
- Display clear and accessible **loading indicators** and **error messages** to guide the user.
- Ensure **accessibility** by adding proper labels, focus control, and ARIA attributes.

### TypeScript Usage

- Use **TypeScript** for all files â€” no JavaScript is allowed.
- Prefer `interface` over `type` for object shape definitions, especially for component props.
- Avoid using `enum`; use **object maps** or `union types` for better flexibility and tree-shaking.
- Define all components as **typed functional components** using `FC<Props>` or explicit props typing.

### Syntax and Formatting

- Use the `function` keyword for reusable, side-effect-free (pure) functions.
- Prefer concise syntax: omit curly braces for single-line conditionals or return statements.
- Write **declarative JSX** â€” avoid imperative DOM manipulation or nested ternaries.
- Format all code automatically using Prettier, following the shared `.prettierrc` config.
- Do not override Prettier settings manually; maintain consistent formatting across the team.

### Error Handling

- Use **React error boundaries** to isolate and recover from rendering errors in client components.
- Create an **`error.tsx` file** in route segments to handle page-level errors with custom UI.
- Wrap async logic in `try/catch` and show **user-friendly error messages** on failure.
- Use **fallback UI** with `<Suspense>` or conditional rendering for slow or error-prone components.
- Cover common edge cases like empty data, null props, or offline states explicitly.

### UI and Styling

- Use **Shadcn UI** for component primitives and consistent design language.
- Use **Tailwind CSS** for layout, spacing, and utility-first styling.
- Prefer **utility classes** over custom CSS. Use `@apply` only for shared, semantic groups.
- Use **Flexbox** and **Grid** utilities to create responsive layouts.
- Follow a **mobile-first** approach using Tailwindâ€™s responsive utilities.
- Apply **semantic breakpoints** based on content structure, not device size.
- Use **container queries** when parent-aware responsiveness is required.
- Ensure **typography and spacing** adapt well to different screen sizes.

### State Management

- Use `useState` for simple local component state.
- Prefer `useReducer` for more complex or multi-field state logic.
- Avoid Zustand or other client-side-only state libraries. This project uses `output: 'export'` (static export mode), which doesn't support client-side hydration. Instead, lift state up and pass it as props, or rely on static data fetching methods.

### Data Fetching

- Use **SWR** for all remote data fetching and caching needs.
- Use a preconfigured **Axios instance** from `lib/axios.ts` as the HTTP client.
- Do **not** create new Axios instances inside components or hooks â€” always import the shared instance.
- Avoid using native `fetch` or any other HTTP clients to maintain consistency.

### ðŸš€ Performance Optimization

- Use `useMemo` and `useCallback` to avoid unnecessary computations and function re-creations.
- Wrap expensive components with `React.memo` when their props are stable.
- Avoid unnecessary re-renders by lifting state and minimizing prop changes.
- Use dynamic `import()` with `ssr: false` only when needed; avoid it for static export when possible.
- Favor **static composition** over dynamic runtime logic.
- Optimize list rendering: always provide stable `key` props.
- Lazy load components and assets only when it benefits static export and bundle size.
- Optimize images with Next.js `<Image />` when possible, using `priority`, `placeholder`, `width/height`, and `loading="lazy"`.

### Seed Data and Mock Content

- Use https://placebear.com/ for placeholder images in seed data.

### Methodology

1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

**Process**:

1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.
